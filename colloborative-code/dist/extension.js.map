{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://collaborative-code/external commonjs \"ws\"","webpack://collaborative-code/./src/extension.ts","webpack://collaborative-code/external commonjs \"vscode\"","webpack://collaborative-code/external node-commonjs \"crypto\"","webpack://collaborative-code/webpack/bootstrap","webpack://collaborative-code/webpack/startup"],"sourcesContent":["module.exports = require(\"ws\");","import * as vscode from \"vscode\";\nimport WebSocket = require(\"ws\");\nimport { randomUUID } from \"crypto\";\n\nlet ws: WebSocket | null = null;\nlet roomCode = \"\";\nlet clientId = randomUUID(); \nlet isHost = false;\nlet applyingRemoteChange = false;\nlet hostFilePath: string | null = null; \nconst applyingRemoteChanges: Set<string> = new Set();\n\n\nexport function activate(context: vscode.ExtensionContext) {\n\n  const disposable = vscode.commands.registerCommand(\"colloborative.startSession\", async () => {\n    roomCode = await vscode.window.showInputBox({\n      placeHolder: \"Enter room code\",\n      prompt: \"Users with the same code join the same room\"\n    }) || \"\";\n\n    const role = await vscode.window.showQuickPick([\"Host\", \"Client\"], {\n      placeHolder: \"Select your role\"\n    });\n    isHost = role === \"Host\";\n\n    connectWebSocket();\n\n    // Host sends the active file immediately when opened or switched\n    if (isHost) {\n      vscode.window.onDidChangeActiveTextEditor((editor) => {\n        if (editor && ws && ws.readyState === WebSocket.OPEN) {\n          hostFilePath = editor.document.uri.toString(); // Save host file path\n          ws.send(JSON.stringify({\n            type: \"activeFile\",\n            room: roomCode,\n            filePath: hostFilePath,\n            content: editor.document.getText()\n          }));\n        }\n      });\n    }\n\n    // Broadcast incremental changes\n    vscode.workspace.onDidChangeTextDocument((event) => {\n      if (applyingRemoteChange) return; // Skip remote-applied edits\n      if (!ws || ws.readyState !== WebSocket.OPEN) return;\n      if (event.contentChanges.length === 0) return;\n\n      for (const change of event.contentChanges) {\n        ws.send(JSON.stringify({\n          type: \"edit\",\n          room: roomCode,\n          clientId,\n          filePath: hostFilePath ?? event.document.uri.toString(), // Always use host file path\n          range: {\n            start: { line: change.range.start.line, character: change.range.start.character },\n            end: { line: change.range.end.line, character: change.range.end.character }\n          },\n          text: change.text\n        }));\n      }\n    });\n  });\n\n  context.subscriptions.push(disposable);\n}\n\n// Connect to WebSocket server\nfunction connectWebSocket() {\n  ws = new WebSocket(\"ws://localhost:3000\");\n\n  ws.on(\"open\", () => {\n    vscode.window.showInformationMessage(`Connected to room ${roomCode}`);\n    ws?.send(JSON.stringify({ type: \"join\", room: roomCode, role: isHost ? \"host\" : \"client\" }));\n  });\n\n  ws.on(\"message\", async (msg: WebSocket.RawData) => {\n    try {\n      const data = JSON.parse(msg.toString());\n\n      if (data.room !== roomCode) return; // Ignore other rooms\n      if (data.clientId === clientId) return; // Ignore our own edits\n\n      switch (data.type) {\n        case \"activeFile\":\n          hostFilePath = data.filePath; // Save host file path\n          if (!isHost) {\n            const doc = await vscode.workspace.openTextDocument({ content: data.content });\n            await vscode.window.showTextDocument(doc, { preview: false });\n          }\n          break;\n\n        case \"edit\":\n          applyRemoteEdit(data);\n          break;\n      }\n\n    } catch (err) {\n      console.error(\"Failed to handle incoming message:\", err);\n    }\n  });\n\n  ws.on(\"close\", () => {\n    vscode.window.showWarningMessage(\"Disconnected from collaboration server\");\n  });\n}\n\n// Apply incremental edit from remote\nasync function applyRemoteEdit(data: any) {\n  const docUri = hostFilePath!;\n  const doc = vscode.workspace.textDocuments.find(d => d.uri.toString() === docUri);\n  if (!doc) return;\n\n  if (applyingRemoteChanges.has(docUri)) return; // Already applying, skip\n\n  applyingRemoteChanges.add(docUri);\n  const edit = new vscode.WorkspaceEdit();\n  edit.replace(\n    doc.uri,\n    new vscode.Range(\n      new vscode.Position(data.range.start.line, data.range.start.character),\n      new vscode.Position(data.range.end.line, data.range.end.character)\n    ),\n    data.text\n  );\n\n  await vscode.workspace.applyEdit(edit);\n  applyingRemoteChanges.delete(docUri);\n}\n\n\nexport function deactivate() {\n  if (ws) ws.close();\n}\n","module.exports = require(\"vscode\");","module.exports = require(\"crypto\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["module","exports","require","context","disposable","vscode","commands","registerCommand","async","roomCode","window","showInputBox","placeHolder","prompt","role","showQuickPick","isHost","ws","WebSocket","on","showInformationMessage","send","JSON","stringify","type","room","msg","data","parse","toString","clientId","hostFilePath","filePath","doc","workspace","openTextDocument","content","showTextDocument","preview","docUri","textDocuments","find","d","uri","applyingRemoteChanges","has","add","edit","WorkspaceEdit","replace","Range","Position","range","start","line","character","end","text","applyEdit","delete","applyRemoteEdit","err","console","error","showWarningMessage","onDidChangeActiveTextEditor","editor","readyState","OPEN","document","getText","onDidChangeTextDocument","event","applyingRemoteChange","contentChanges","length","change","subscriptions","push","close","randomUUID","Set","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}